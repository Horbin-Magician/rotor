name: 'publish'

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn' # Set this to npm, yarn or pnpm.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: yarn install # change this to npm or pnpm depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Generate jsDelivr latest.json
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          REPO="${{ github.repository }}"
          REPO_USER=$(echo $REPO | cut -d'/' -f1)
          REPO_NAME=$(echo $REPO | cut -d'/' -f2)

          gh release download "$TAG_NAME" -p "latest.json"

          cat > replace_jsdelivr.js << EOF
          const fs = require('fs');
          const latest = JSON.parse(fs.readFileSync('latest.json', 'utf8'));
          function jsdelivrUrl(filename) {
              return `https://cdn.jsdelivr.net/gh/${process.env.REPO}@${process.env.TAG}/${filename}`;
          }
          for (const platform in latest.platforms) {
              const url = latest.platforms[platform].url;
              const filename = url.split('/').pop();
              latest.platforms[platform].url = jsdelivrUrl(filename);
          }
          fs.writeFileSync('latest_jsDelivr.json', JSON.stringify(latest, null, 2));
          EOF

          REPO="$REPO"
          TAG="$TAG_NAME"
          node replace_jsdelivr.js
        env:
          REPO: ${{ github.repository }}
          TAG: ${{ github.ref_name }}

      - name: Upload latest_jsDelivr.json to Release
        uses: softprops/action-gh-release@v2
        with:
          files: latest_jsDelivr.json
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
