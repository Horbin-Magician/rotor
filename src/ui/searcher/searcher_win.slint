import { Button, LineEdit, ListView, Palette} from "std-widgets.slint";

import { BaseWindow } from "../frame/windows.slint";

enum SearchResultType {
    File,
    Application,
    Folder,
    System,
}

struct SearchResult_slint {
    id: int,
    icon: image,
    showname: string,
    filename: string,
    path: string,
    result_type: SearchResultType,
}

component ToolButton inherits TouchArea {
    width: 50px;
    mouse-cursor: pointer;

    in property <image> icon;

    admin_btn_rc := Rectangle {
        admin_btn_img := Image {
            height: 20px;
            width: 20px;
            colorize: Palette.foreground;
            source: icon;
        }
    }
    states [ 
        hover when self.has-hover: {
            admin_btn_img.colorize: cyan;
        }
    ]
}

component FileListItem inherits Rectangle {
    height: 60px;
    border-radius: 5px;
    
    in property <SearchResult_slint> data;
    in property <int> active_id;
    callback item_click(PointerEvent);
    callback open_with_admin();
    callback open_file_dir();

    search_result_item_touch := TouchArea {
        mouse-cursor: pointer;
        pointer-event(event) => {
            item_click(event);
        }

        HorizontalLayout {
            item_content := HorizontalLayout {
                padding-top: 5px;
                padding-bottom: 5px;
                padding-right: 5px;
                Rectangle {
                    width: 2px;
                    active_bar := Rectangle {
                        x: 0px;
                        width: 2px;
                        border-radius: 1px;
                        height: 30px;
                        background: Palette.accent-background;
                    }
                }
                Rectangle {
                    width: 50px;
                    Image {
                        height: 32px;
                        source: data.icon;
                    }
                }
                VerticalLayout {
                    HorizontalLayout {
                        alignment: start;
                        Text {
                            height: 20px;
                            vertical-alignment: center;
                            overflow: elide;
                            text: data.showname;
                            font-size: 16px;
                        }
                        Rectangle { width: 5px; } // for space
                        if data.result_type == SearchResultType.File: Rectangle {
                            height: 20px;
                            width: 40px;
                            background: Palette.border;
                            border-radius: 10px;
                            Text {
                                vertical-alignment: center;
                                horizontal-alignment: center;
                                text: @tr("文件");
                                font-size: 12px;
                            }
                        }
                        if data.result_type == SearchResultType.Application: Rectangle {
                            height: 20px;
                            width: 40px;
                            background: Palette.border;
                            border-radius: 10px;
                            Text {
                                vertical-alignment: center;
                                horizontal-alignment: center;
                                text: @tr("应用");
                                font-size: 12px;
                            }
                        }
                    }
                    Text {
                        height: 30px;
                        vertical-alignment: center;
                        overflow: elide;
                        text: data.path;
                        color: grey;
                        font-size: 16px;
                    }
                }
                animate width { 
                    duration: 0.2s;
                    easing: ease-in-out;
                }
            }

            item_menu := Rectangle {
                width: 100px;
                if data.result_type == SearchResultType.File: HorizontalLayout{
                    ToolButton {
                        icon: @image-url("../assets/icon/admin.svg");
                        clicked() => { open_with_admin(); }
                    }
                
                    ToolButton {
                        icon: @image-url("../assets/icon/file.svg");
                        clicked() => { open_file_dir(); }
                    }
                }
            }
        }
    }

    states [
        active when root.active_id == data.id && !search_result_item_touch.has-hover: {
            background: Palette.alternate-background;
            active_bar.x: 0px;
            item_content.width: self.width;
        }
        inactive when root.active_id != data.id && !search_result_item_touch.has-hover : {
            background: transparent;
            active_bar.x: -2px;
            item_content.width: self.width;
        }
        active_hover when root.active_id == data.id && search_result_item_touch.has-hover: {
            background: Palette.alternate-background;
            active_bar.x: 0px;
            item_content.width: (self.width) - item_menu.width;
        }
        hover when search_result_item_touch.has-hover: {
            background: Palette.alternate-background;
            active_bar.x: -2px;
            item_content.width: (self.width) - item_menu.width;
        }
    ]
}

export component SearchWindow inherits BaseWindow {
    background: transparent;
    
    public function change_theme(theme: int) { 
        if theme == 0 {
            Palette.color-scheme = ColorScheme.unknown;
        } else if theme == 1 {
            Palette.color-scheme = ColorScheme.dark;
        } else if theme == 2 {
            Palette.color-scheme = ColorScheme.light;
        }
    }

    in property <length> ui_width: 500px;
    in property <[SearchResult_slint]> search_result;
    in property <int> active_id;

    in-out property <string> query <=> input.text;
    in-out property <length> viewport-y <=> result-list.viewport-y;

    callback query_change(string);
    callback key_pressed(KeyEvent);
    callback item_click(PointerEvent, int);
    callback open_with_admin(int);
    callback open_file_dir(int);
    callback add_result();
    callback focus_change(bool);

    title: @tr("小云搜索");
    forward-focus: input;
    default-font-size: 18px;
    width: ui_width;
    always-on-top: true;

    VerticalLayout {
        Rectangle {
            border-radius: 5px;
            border-color: Palette.alternate-background;
            border-width: 3phx;
            background: Palette.background;

            VerticalLayout {
                input := LineEdit {
                    changed has-focus => { root.focus_change(self.has-focus); }
                    height: 60px;
                    placeholder-text: @tr("请输入需要搜索的内容");
                    edited(str) => { root.query_change(str); }
                    key-pressed(event) => {
                        root.key_pressed(event);
                        reject
                    }
                }

                result-list := ListView {
                    padding: 0;
                    height: (search_result.length > 7 ? 7 : search_result.length) * 60px;
                    scrolled => {
                        if ((self.height - self.viewport-y) / 60px) == search_result.length
                            && Math.mod(search_result.length, 20) == 0
                        { root.query_change(root.query); }
                    }

                    for data in root.search_result: FileListItem {
                        data: data;
                        active_id: root.active_id;
                        item_click(event) => { root.item_click(event, data.id); }
                        open_with_admin() => { root.open_with_admin(data.id); }
                        open_file_dir() => { root.open_file_dir(data.id); }
                    }
                }
            }
        }
    }
}