import { CheckBox, StandardListView, Palette, Button, ProgressIndicator, GroupBox } from "std-widgets.slint";

import { BaseWindow } from "../frame/base_win.slint";
import { BaseSettingPage, ScreenShotterSettingPage, SearchSettingPage } from "./pages/pages.slint";
import { SideBar } from "./side_bar.slint";
import { TitleBar } from "./title_bar.slint";

export component SettingWindow inherits BaseWindow {
    width: 500px;
    height: 400px;
    title: @tr("设置");
    background: transparent;

    public function change_theme(theme: int) { 
        if theme == 0 {
            Palette.color-scheme = ColorScheme.unknown;
        } else if theme == 1 {
            Palette.color-scheme = ColorScheme.dark;
        } else if theme == 2 {
            Palette.color-scheme = ColorScheme.light;
        }
    }

    callback minimize <=> title_bar.minimize;
    callback close <=> title_bar.close;
    callback win_move;

    callback power_boot_changed(bool);
    callback theme_changed(int);
    callback language_changed(int);
    callback check_update();
    callback update();
    callback shortcut_changed(string, KeyEvent);
    callback click_logo <=> side_bar.click_logo;
    callback zoom_delta_changed(string);

    in property <string> version;

    in property <string> shortcut_search;
    in property <string> shortcut_screenshot;
    in property <string> shortcut_pinwin_save;
    in property <string> shortcut_pinwin_close;
    in property <string> shortcut_pinwin_copy;
    in property <string> shortcut_pinwin_hide;
    in property <string> zoom_delta;
    
    in-out property <int> update_state: 0;
    in-out property <string> current_version;
    in-out property <string> latest_version;
    in-out property <string> update_info;
    in-out property <bool> power_boot;
    in-out property <int> language;
    in-out property <int> theme;

    in-out property <bool> block;
    in-out property <float> progress: -1.0;

    touch := TouchArea {
        pointer-event(event) => {
            if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                win_move();
            }
        }

        main_rec := Rectangle {
            height: (root.height) - 4px;
            width: (root.width) - 4px;

            background: Palette.background;
            border-color: Palette.alternate-background;
            border-width: 1px;
            border-radius: 5px;
            clip: true;
            
            VerticalLayout {

                HorizontalLayout {
                    side_bar := SideBar {
                        model: [
                            @tr("基础"),
                            @tr("搜索"),
                            @tr("截图"),
                        ];
                    }

                    // divider
                    Rectangle { 
                        width: 1px;
                        background: Palette.border;
                    }

                    VerticalLayout {
                        title_bar := TitleBar {}

                        Rectangle {
                            if(side_bar.current-item == 0) : 
                                BaseSettingPage {
                                    version: version;
                                    power_boot <=> root.power_boot;
                                    language <=> root.language;
                                    theme <=> root.theme;
                                    shortcut_search: root.shortcut_search;
                                    shortcut_screenshot: root.shortcut_screenshot;

                                    language_changed(language) => { root.language_changed(language); }
                                    theme_changed(theme) => { root.theme_changed(theme); }
                                    power_boot_changed(power_boot) => { root.power_boot_changed(power_boot); }
                                    shortcut_changed(shortcut, event) => { root.shortcut_changed(shortcut, event); }
                                    check_update() => { root.check_update(); }
                                }
                            if(side_bar.current-item == 1) :
                                SearchSettingPage {}
                            if(side_bar.current-item == 2) :
                                ScreenShotterSettingPage {
                                    shortcut_pinwin_save: root.shortcut_pinwin_save;
                                    shortcut_pinwin_close: root.shortcut_pinwin_close;
                                    shortcut_pinwin_copy: root.shortcut_pinwin_copy;
                                    shortcut_pinwin_hide: root.shortcut_pinwin_hide;
                                    zoom_delta: root.zoom_delta;
                                    shortcut_changed(shortcut, event) => { root.shortcut_changed(shortcut, event); }
                                    zoom_delta_changed(zoom_delta) => { root.zoom_delta_changed(zoom_delta); }
                                }
                        }
                    }
                }

                if block : ProgressIndicator {
                    width: 100%;
                    height: 4px;
                    indeterminate: root.progress < 0.0 ? true : false;
                    progress: root.progress < 0.0 ? 0.0 : root.progress;
                }
            }


        }
    }

    if (update_state > 0) : Rectangle {
        height: main_rec.height;
        width: main_rec.width;
        background: Palette.background.with_alpha(0.5);
        border-radius: 5px;
        clip: true;

        in-out property <int> update_state <=> root.update_state;
        in-out property <string> current_version <=> root.current_version;
        in-out property <string> latest_version <=> root.latest_version;
        
        TouchArea {
            clicked() => { update_state = 0; }
            Rectangle {
                height: 200px;
                width: 200px;
                background: Palette.background;
                border-width: 1px;
                border-radius: 5px;
                border-color: Palette.alternate-background;
                clip: true;
                
                if (update_state == 1 && current_version == latest_version) : VerticalLayout {
                    alignment: center;
                    spacing: 5px;
                    Text {
                        horizontal-alignment: center;
                        vertical-alignment: center;
                        text: @tr("当前已是最新版本");
                    }
                    HorizontalLayout {
                        padding-top: 10px;
                        alignment: center;
                        Button {
                            height: 30px;
                            width: 60px;
                            text: @tr("确定");
                            clicked() => { root.update_state = 0; }
                        }
                    }
                }

                if (update_state == 1 && current_version != latest_version && latest_version != "unknown"): VerticalLayout {
                    alignment: center;
                    spacing: 8px;
                    padding-top: 10px;
                    padding-left: 10px;
                    padding-right: 10px;
                    Text {
                        horizontal-alignment: center;
                        vertical-alignment: center;
                        text: @tr("最新版本：{}", latest_version);
                    }

                    GroupBox {
                        title: @tr("更新内容");
                        Text {
                            horizontal-alignment: center;
                            vertical-alignment: center;
                            text: @tr("{}", update_info);
                        }
                    }

                    Text {
                        horizontal-alignment: center;
                        vertical-alignment: center;
                        text: @tr("是否更新至最新版本？");
                    }

                    HorizontalLayout {
                        padding-top: 10px;
                        alignment: center;
                        spacing: 10px;
                        Button {
                            height: 28px;
                            width: 60px;
                            text: @tr("是");
                            clicked() => { root.update(); }
                        }
                        Button {
                            height: 28px;
                            width: 60px;
                            text: @tr("否");
                            clicked() => { root.update_state = 0; }
                        }
                    }
                }

                if (update_state == 1 && latest_version == "unknown"): VerticalLayout {
                    alignment: center;
                    spacing: 5px;
                    Text {
                        horizontal-alignment: center;
                        vertical-alignment: center;
                        text: @tr("获取版本信息失败");
                    }

                    Text {
                        horizontal-alignment: center;
                        vertical-alignment: center;
                        text: @tr("请检查网络环境");
                    }

                    HorizontalLayout {
                        padding-top: 10px;
                        alignment: center;
                        spacing: 10px;
                        Button {
                            height: 28px;
                            width: 60px;
                            text: @tr("确定");
                            clicked() => { root.update_state = 0; }
                        }
                    }
                }

                if (update_state == 2): VerticalLayout {
                    alignment: center;
                    spacing: 5px;
                    Text {
                        horizontal-alignment: center;
                        vertical-alignment: center;
                        text: @tr("更新失败");
                    }
                    Text {
                        horizontal-alignment: center;
                        vertical-alignment: center;
                        text: @tr("请检查网络环境");
                    }

                    HorizontalLayout {
                        padding-top: 10px;
                        alignment: center;
                        spacing: 10px;
                        Button {
                            height: 28px;
                            width: 60px;
                            text: @tr("确定");
                            clicked() => { root.update_state = 0; }
                        }
                    }
                }
            }
        }
    }
}