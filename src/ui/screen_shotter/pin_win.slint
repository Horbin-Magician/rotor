import { Button, Palette } from "std-widgets.slint";

import { BaseWindow } from "../frame/windows.slint";

enum Direction {
    Upper, Lower, Left, Right,
    LeftUpper, LeftLower, RightUpper, RightLower,
    Center,
}

enum PinState {
    Normal, Move, DrawFree,
}

export component PinWindow inherits BaseWindow {
    title: @tr("小云视窗");
    forward-focus: key-focus;
    
    pure callback focus_trick(bool) -> bool;
    always-on-top: focus_trick(key-focus.has-focus);

    property <bool> show_zoom: false;

    in property <image> bac_image;
    in property <int> win_border_width: 1;
    in property <float> scale_factor;

    in property <int> img_x;
    in property <int> img_y;
    in-out property <int> img_width;
    in-out property <int> img_height;
    in-out property <int> zoom_factor: 100;     // neet to be divided by one hundred
    in-out property <int> zoom_delta: 2; // neet to be divided by one hundred

    in-out property <int> delta_img_width: 0;
    in-out property <int> delta_img_height: 0;

    in-out property <length> win_width: (((img_width + delta_img_width) * zoom_factor / 100) + win_border_width * 2) * 1phx;
    in-out property <length> win_height: (((img_height + delta_img_height) * zoom_factor / 100) + win_border_width * 2) * 1phx;

    width <=> win_width;
    height <=> win_height;

    in-out property <bool> is_stick_x: false;
    in-out property <bool> is_stick_y: false;

    in-out property <PinState> state: PinState.Normal;
    in-out property <[string]> pathes: [];
    in-out property <string> drawing_path: "";
    
    property <MouseCursor> mouse_type: MouseCursor.move;
    property <Direction> mouse_direction;
    property <length> extend_scope: 8px;

    callback close();
    callback hide();
    callback save();
    callback copy();
    callback trigger_draw();
    callback return_draw();

    callback win_move(length, length, Direction);
    callback key_release(KeyEvent);
    callback draw_path(string);
    callback update_record();

    image_border := Rectangle {
        border-color: rgb(0, 175, 255);
        border-width: win_border_width * 1phx;
        pin_image := Image {
            source: bac_image;
            x: win_border_width * 1phx;
            y: win_border_width * 1phx;
            width: root.width - win_border_width * 2phx;
            height: root.height - win_border_width * 2phx;

            source-clip-x: img_x;
            source-clip-y: img_y;
            source-clip-width: (img_width + delta_img_width);
            source-clip-height: (img_height + delta_img_height);

            move_touch_area := TouchArea {
                mouse-cursor: mouse_type;
                moved => {
                    if root.state == PinState.Move { // move window
                        root.win_move(self.mouse-x - self.pressed-x, self.mouse-y - self.pressed-y, mouse_direction);
                    } else if root.state == PinState.DrawFree { // draw line
                        if root.drawing_path == "" {
                            root.drawing_path = @tr("M {} {}", self.mouse-x / zoom_factor * 100 / 1px * scale_factor, self.mouse-y / zoom_factor * 100 / 1px * scale_factor);
                        } else {
                            root.drawing_path = @tr("{} L {} {}", root.drawing_path, self.mouse-x / zoom_factor * 100 / 1px * scale_factor, self.mouse-y / zoom_factor * 100 / 1px * scale_factor);
                        }
                    }
                }
                
                pointer-event(event) => {
                    if (event.kind == PointerEventKind.down) {
                        if (root.state == PinState.Normal && event.button == PointerEventButton.left) {
                            root.state = PinState.Move;
                        }
                    } else if (event.kind == PointerEventKind.up) {
                        if (event.button == PointerEventButton.left) {
                            if root.state == PinState.Move {
                                root.state = PinState.Normal;
                                root.img_height = root.img_height + root.delta_img_height;
                                root.img_width = root.img_width + root.delta_img_width;
                                root.delta_img_height = 0;
                                root.delta_img_width = 0;
                                root.update_record();
                            } else if root.state == PinState.DrawFree {
                                draw_path(root.drawing_path);
                                root.drawing_path = "";
                            }
                        }
                    } else if (event.kind == PointerEventKind.move) {
                        if root.state != PinState.Normal { 
                            if root.state == PinState.DrawFree {
                                root.mouse_type = MouseCursor.crosshair;
                            }
                            return;
                        }
                        if (self.mouse-x < extend_scope && self.mouse-y < extend_scope) {
                            root.mouse_direction = Direction.LeftUpper;
                            root.mouse_type = MouseCursor.nwse-resize;
                        } else if (self.mouse-x < extend_scope && self.mouse-y > (win_height - extend_scope)) {
                            root.mouse_direction = Direction.LeftLower;
                            root.mouse_type = MouseCursor.nesw-resize;
                        } else if (self.mouse-x > (win_width - extend_scope) && self.mouse-y < extend_scope) {
                            root.mouse_direction = Direction.RightUpper;
                            root.mouse_type = MouseCursor.nesw-resize;
                        } else if (self.mouse-x > (win_width - extend_scope) && self.mouse-y > (win_height - extend_scope)) {
                            root.mouse_direction = Direction.RightLower;
                            root.mouse_type = MouseCursor.nwse-resize;
                        } else if (self.mouse-x < extend_scope) {
                            root.mouse_direction = Direction.Left;
                            root.mouse_type = MouseCursor.ew-resize;
                        } else if (self.mouse-x > (win_width - extend_scope)) {
                            root.mouse_direction = Direction.Right;
                            root.mouse_type = MouseCursor.ew-resize;
                        } else if (self.mouse-y < extend_scope) {
                            root.mouse_direction = Direction.Upper;
                            root.mouse_type = MouseCursor.ns-resize;
                        } else if (self.mouse-y > (win_height - extend_scope)) {
                            root.mouse_direction = Direction.Lower;
                            root.mouse_type = MouseCursor.ns-resize;
                        } else {
                            root.mouse_direction = Direction.Center;
                            root.mouse_type = MouseCursor.move;
                        }
                    }
                }

                scroll-event(event) => {
                    if (event.delta-y > 0) {
                        if (root.zoom_factor < 500) { root.zoom_factor = root.zoom_factor + zoom_delta; }
                    } else if (event.delta-y < 0) {
                        if (root.zoom_factor > 10) { root.zoom_factor = root.zoom_factor - zoom_delta; }
                    }
                    root.focus_trick(true); // trigger toolbar move
                    root.show_zoom = true;
                    show_zoom_timer.running = true;
                    accept
                }

                key_focus := FocusScope {
                    key-released(event) => {
                        key_release(event);
                        accept;
                    }
                }
            }
        }

        for path in root.pathes:
            Path {
                viewbox-width: root.width / zoom_factor * 100 / 1phx;
                viewbox-height: root.height / zoom_factor * 100 / 1phx;
                commands: path;
                stroke: red;
                stroke-width: 3phx;
            }
        
        Path {
            viewbox-width: root.width / zoom_factor * 100 / 1phx;
            viewbox-height: root.height / zoom_factor * 100 / 1phx;
            commands: drawing_path;
            stroke: red;
            stroke-width: 3phx;
        }

        show_zoom_timer := Timer {
            interval: 1s;
            running: false;
            triggered() => { 
                root.show_zoom = false;
                self.running = false;
            }
        }

        if root.show_zoom: Rectangle {
            x: ((root.width) - self.width) / 2;
            y: ((root.height) - self.height) / 2;
            width: 38px;
            height: 20px;
            background: Palette.background.with-alpha(0.5);
            Text {
                text: @tr("{}%", zoom_factor);
            }
        }
    }
}