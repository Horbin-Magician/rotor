struct Rect {
    x: length,
    y: length,
    width: length,
    height: length,
}
export component MaskWindow inherits Window {
    no-frame: true;
    forward-focus: focus_scope;
    title: "截图窗口";
    
    property <Rect> select_rect;
    property <Point> mouse_down_pos;
    property <Point> mouse_move_pos;

    in property <image> bac_image;
    
    in-out property <bool> mouse_left_press;
    in-out property <float> scale_factor: 0;
    in-out property <int> offset_x;
    in-out property <int> offset_y;
    
    in-out property <bool> color_type_Dec: true;
    in-out property <string> color_str: "RGB:(???,???,???)";
    
    callback shot();
    callback key_released(KeyEvent);
    callback new_pin_win(Rect);
    pure callback refresh_rgb_trick(float, float, bool) -> bool;

    always-on-top: refresh_rgb_trick(touch_area.mouse-x / 1px, touch_area.mouse-y / 1px, color_type_Dec);

    bac-img := Image {
        height: 100%;
        width: 100%;

        source: bac_image;
        Rectangle {
            background: black.with_alpha(0.5);
            focus_scope := FocusScope {
                key-released(event) => {
                    root.key_released(event);
                    accept
                }
            }

            touch_area := TouchArea {
                mouse-cursor: crosshair;

                pointer-event(event) => {
                    if(event.button == PointerEventButton.left) {
                        if(event.kind == PointerEventKind.down) {
                            root.mouse_left_press = true;
                            root.mouse_down_pos.x = clamp(touch_area.mouse-x, 0, root.width);
                            root.mouse_down_pos.y = clamp(touch_area.mouse-y, 0, root.height);
                            root.mouse_move_pos.x = clamp(touch_area.mouse-x, 0, root.width);
                            root.mouse_move_pos.y = clamp(touch_area.mouse-y, 0, root.height);
                        } else if (event.kind == PointerEventKind.up) {
                            root.new_pin_win(root.select_rect);
                            root.mouse_left_press = false;
                            root.select-rect.x = -1px;
                            root.select-rect.y = -1px;
                            root.select-rect.width = 0px;
                            root.select-rect.height = 0px;
                        }
                    }
                }
                moved() => {
                    if(mouse_left_press == true) {
                        root.mouse_move_pos.x = clamp(touch_area.mouse-x, 0, (root.width)-1px);
                        root.mouse_move_pos.y = clamp(touch_area.mouse-y, 0, (root.height)-1px);

                        root.select-rect.x = ceil(min(root.mouse_down_pos.x, root.mouse_move_pos.x) / 1px  * root.scale_factor) * 1px;
                        root.select-rect.y = ceil(min(root.mouse_down_pos.y, root.mouse_move_pos.y) / 1px  * root.scale_factor) * 1px;
                        root.select-rect.width = ceil(abs(( (root.mouse_move_pos.x) - root.mouse_down_pos.x) / 1px)  * root.scale_factor) * 1px;
                        root.select-rect.height = ceil(abs(( (root.mouse_move_pos.y) - root.mouse_down_pos.y) / 1px)  * root.scale_factor) * 1px;
                    }
                }
            }

            select_border := Rectangle {
                border-color: rgb(0, 175, 255);
                border-width: 1px;

                x: root.select-rect.x / (root.scale_factor) - self.border-width;
                y: root.select-rect.y / (root.scale_factor) - self.border-width;
                width: root.select-rect.width / root.scale_factor + self.border-width * 2;
                height: root.select-rect.height / root.scale_factor + self.border-width * 2;

                select_win := Image {
                    source: bac_image;
                    image-fit: fill;

                    x: select_border.border-width;
                    y: select_border.border-width;
                    width: root.select-rect.width / root.scale_factor;
                    height: root.select-rect.height / root.scale_factor;
                    
                    source-clip-x: root.select-rect.x / 1px;
                    source-clip-y: root.select-rect.y / 1px;
                    source-clip-width: root.select-rect.width / 1px;
                    source-clip-height: root.select-rect.height / 1px;
                }
            }
        }
    }

    amplifier := Rectangle {
        width: 120px;
        height:146px; // 90px + 50px + 2px * 3
        x: ((touch-area.mouse-x) + self.width > root.width) ? 
            min(touch-area.mouse-x, root.width) - self.width : max(touch-area.mouse-x, 0);
        y: ((touch-area.mouse-y) + 25px + self.height > root.height) ? 
            min((touch-area.mouse-y) - 25px, root.height) - self.height : max(touch-area.mouse-y + 25px, 0);
        background: black.with_alpha(0.6);

        VerticalLayout {
            alignment: start;
            spacing: 2px;
            Rectangle {
                width: 100%;
                height: 90px;
                border-width: 1px;
                border-color: white;
                
                Image {
                    width: (parent.width) - 2px;
                    height: (parent.height) - 2px;
                    source: bac_image;
                    image-fit: fill;
                    source-clip-x: (touch-area.mouse-x / 1px - self.width / 8px) * root.scale_factor;
                    source-clip-y: (touch-area.mouse-y / 1px - self.height / 8px) * root.scale_factor;
                    source-clip-width: (self.width / 4px) * root.scale_factor;
                    source-clip-height: (self.height / 4px) * root.scale_factor;
                }
            }

            Text {
                horizontal-alignment: center;
                text: touch_area.pressed ?
                    @tr(
                        "宽{}×高{}",
                        round(root.select_rect.width / 1px * root.scale-factor),
                        round(root.select_rect.height / 1px * root.scale-factor)
                    ) : @tr("左键划选区域");
                color: white;
            } // draw width and height

            Text {
                horizontal-alignment: center;
                text: color_str;
                color: white;
            } // draw RGB color code

            Text {
                horizontal-alignment: center;
                text: @tr("Z键切换 C键复制");
                color: white;
            } // draw tips
        }

        // draw cross curve
        Path {
            width: 100%;
            height: 90px;
            commands: "M 60 0 v 90";
            stroke: rgba(0, 180, 255, 0.7);
            stroke-width: 2px;
        } // draw vertical lines

        Path {
            width: 100%;
            height: 90px;
            commands: "M 0 45 L 120 45";
            stroke: rgba(0, 180, 255, 0.7);
            stroke-width: 2px;
        } // draw horizontal lines
    }
}