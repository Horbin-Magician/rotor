import { Button, Palette} from "std-widgets.slint";

import { BaseWindow } from "../frame/base_win.slint";

enum ToolType {
    Trigger,
    Clicker,
}

struct Tool_slint {
    id: int,
    icon: image,
    name: string,
    type: ToolType,
}

component ToolBtn inherits Rectangle { // TODO merge with TitleBtn as SimpleBtn
    in property<image> icon <=> image.source;
    in property<color> hover_color: Palette.accent-background;
    in property <bool> active: false;
    callback clicked <=> touch.clicked;

    width: 30px;
    background: transparent;
    animate background { duration: 150ms; }

    touch := TouchArea {
        image := Image {
            height: 18px;
            width: 18px;
            colorize: Palette.foreground;
        }
    }

    states [
        pressed when touch.pressed:{
            root.background: hover_color.darker(0.5);
        }
        active when self.active:{
            root.background: hover_color;
        }
        hover when touch.has-hover:{
            root.background: hover_color;
        }
    ]
}

export component ToolbarWindow inherits BaseWindow {
    forward-focus: focus_scope;

    public function change_theme(theme: int) { 
        if theme == 0 {
            Palette.color-scheme = ColorScheme.unknown;
        } else if theme == 1 {
            Palette.color-scheme = ColorScheme.dark;
        } else if theme == 2 {
            Palette.color-scheme = ColorScheme.light;
        }
    }

    pure callback focus_trick(bool, bool) -> bool;
    always-on-top: focus_trick(pin_focused, toolbar_focused);

    in-out property <[Tool_slint]> tools: [
        { id: 4, icon: @image-url("../assets/icon/draw.svg"), name: @tr("绘制"), type: ToolType.Trigger, division: false },
        { id: 5, icon: @image-url("../assets/icon/return.svg"), name: @tr("回退"), type: ToolType.Trigger, division: true },
        { id: 0, icon: @image-url("../assets/icon/min.svg"), name: @tr("最小化"), type: ToolType.Clicker, division: false },
        { id: 3, icon: @image-url("../assets/icon/file.svg"), name: @tr("保存"), type: ToolType.Clicker, division: false },
        { id: 2, icon: @image-url("../assets/icon/close.svg"), name: @tr("关闭"), type: ToolType.Clicker, division: false },
        { id: 1, icon: @image-url("../assets/icon/right.svg"), name: @tr("复制"), type: ToolType.Clicker, division: false },
    ];
    
    in-out property <int> win_width: tools.length * (self.height / 1px);
    in-out property <int> tool_len: tools.length;
    in-out property <bool> pin_focused: false;
    in-out property <bool> toolbar_focused: focus_scope.has-focus;
    in-out property <int> id: -1;
    in-out property <string> active_name: ""; // TODO 获取不同pinwin的状态信息

    callback show_pos(int, int, int);
    callback try_hide(bool);
    callback win_move(int, int);
    callback click(int, int);
    callback key_released(KeyEvent);

    Rectangle {
        background: Palette.background;
        focus_scope := FocusScope {
            HorizontalLayout {
                spacing: 0;
                padding: 0;
    
                for tool in root.tools: ToolBtn{
                    width: root.height;
                    height: root.height;
                    icon: tool.icon;
                    active: root.active_name == tool.name;
                    clicked => { 
                        if tool.type == ToolType.Trigger {
                            root.active_name = root.active_name == tool.name ? "" : tool.name;
                        }
                        root.click(root.id, tool.id); 
                    }
                }
            }
        }
    }


}